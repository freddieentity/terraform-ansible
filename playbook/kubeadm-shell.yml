---
- name: Install Common
  hosts: controlplane, worker
  gather_facts: true
  become: true
  tasks:
    - name: Setting common configuration for all nodes
      shell: |
        echo "|x| Setting common configuration for all nodes..."
        echo "--------"

        #### Configure all nodes
        cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
        overlay
        br_netfilter
        EOF
        sudo modprobe overlay
        sudo modprobe br_netfilter
        cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
        net.bridge.bridge-nf-call-iptables  = 1
        EOF

        sudo sysctl --system

        #### Install Container Engine
        sudo apt-get update
        sudo apt-get install -y ca-certificates curl gnupg lsb-release
        sudo apt install containerd -y
        mkdir /etc/containerd
        containerd config default > /etc/containerd/config.toml
        sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
        systemctl restart containerd

        # curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        # echo \
        #   "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \
        #   $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        # sudo apt-get install docker.io -y
        # systemctl enable docker.service
        # systemctl start docker.service

        # cat <<EOF | sudo tee /etc/docker/daemon.json
        # {
        #   "exec-opts": ["native.cgroupdriver=systemd"],
        #   "log-driver": "json-file",
        #   "log-opts": {
        #     "max-size": "100m"
        #   },
        #   "storage-driver": "overlay2"
        # }
        # EOF
        # sudo systemctl enable docker
        # sudo systemctl daemon-reload
        # sudo systemctl restart docker

        #### Install Kubeadm, Kubectl, Kubelet
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl

        mkdir -p /etc/apt/keyrings

        curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg

        echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

        sudo apt-get update

        sudo apt-get install -y kubelet=1.27.0-00 kubeadm=1.27.0-00 kubectl=1.27.0-00

# - name: Install controlplane components
#   hosts: controlplane
#   gather_facts: true
#   become: true
#   tasks:
#     - name: Install controlplane components
#       shell: |
#         echo "|x| Initializing cluster controlplane..."
#         echo "--------"

#         # Get IP of controlplane via network interface
#         IP_ADDR=$(ip addr show ens5 | grep -oP '(?<=inet\s)\d+(\.\d+){3}')

#         kubeadm init --apiserver-cert-extra-sans=controlplane --apiserver-advertise-address $IP_ADDR --pod-network-cidr=10.244.0.0/16

#         # Copy kubeconfig to default location within controlplane nodes. Change to ROOT user to easily interact with cluster
#         mkdir -p $HOME/.kube
#         sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
#         sudo chown $(id -u):$(id -g) $HOME/.kube/config

#         # Apply Networking Addons for Container Engine to assign Pod IP
#         kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/calico.yaml 

#         # Untaint controlplane node to allow workload deployment. By default, it blocks all pod scheduled on controlplane
#         kubectl taint nodes --all node-role.kubernetes.io/control-plane-

#     - name: Print join command
#       shell: kubeadm token create --print-join-command
#       register: kubernetes_join_command

#     - name: Copy join command to local file.
#       local_action: copy content="{{ kubernetes_join_command.stdout_lines[0] }}" dest="/tmp/kubernetes_join_command" mode=0777

# - name: Install Kubeadm
#   hosts: worker
#   gather_facts: true
#   become: true
#   tasks:
#     - name: Copy join command from Ansiblehost to the worker nodes.
#       copy:
#         src: /tmp/kubernetes_join_command
#         dest: /tmp/kubernetes_join_command
#         mode: 0777
        
#     - name: Execute worker join command
#       shell: sh /tmp/kubernetes_join_command